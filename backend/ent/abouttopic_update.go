// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ITK13201/portfolio/backend/ent/abouttopic"
	"github.com/ITK13201/portfolio/backend/ent/image"
	"github.com/ITK13201/portfolio/backend/ent/predicate"
)

// AboutTopicUpdate is the builder for updating AboutTopic entities.
type AboutTopicUpdate struct {
	config
	hooks    []Hook
	mutation *AboutTopicMutation
}

// Where appends a list predicates to the AboutTopicUpdate builder.
func (atu *AboutTopicUpdate) Where(ps ...predicate.AboutTopic) *AboutTopicUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetTitle sets the "title" field.
func (atu *AboutTopicUpdate) SetTitle(s string) *AboutTopicUpdate {
	atu.mutation.SetTitle(s)
	return atu
}

// SetDescriptionJp sets the "description_jp" field.
func (atu *AboutTopicUpdate) SetDescriptionJp(s string) *AboutTopicUpdate {
	atu.mutation.SetDescriptionJp(s)
	return atu
}

// SetDescriptionEn sets the "description_en" field.
func (atu *AboutTopicUpdate) SetDescriptionEn(s string) *AboutTopicUpdate {
	atu.mutation.SetDescriptionEn(s)
	return atu
}

// SetImageID sets the "image_id" field.
func (atu *AboutTopicUpdate) SetImageID(i int64) *AboutTopicUpdate {
	atu.mutation.SetImageID(i)
	return atu
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (atu *AboutTopicUpdate) SetNillableImageID(i *int64) *AboutTopicUpdate {
	if i != nil {
		atu.SetImageID(*i)
	}
	return atu
}

// ClearImageID clears the value of the "image_id" field.
func (atu *AboutTopicUpdate) ClearImageID() *AboutTopicUpdate {
	atu.mutation.ClearImageID()
	return atu
}

// SetPriority sets the "priority" field.
func (atu *AboutTopicUpdate) SetPriority(i int) *AboutTopicUpdate {
	atu.mutation.ResetPriority()
	atu.mutation.SetPriority(i)
	return atu
}

// AddPriority adds i to the "priority" field.
func (atu *AboutTopicUpdate) AddPriority(i int) *AboutTopicUpdate {
	atu.mutation.AddPriority(i)
	return atu
}

// SetCreatedAt sets the "created_at" field.
func (atu *AboutTopicUpdate) SetCreatedAt(t time.Time) *AboutTopicUpdate {
	atu.mutation.SetCreatedAt(t)
	return atu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atu *AboutTopicUpdate) SetNillableCreatedAt(t *time.Time) *AboutTopicUpdate {
	if t != nil {
		atu.SetCreatedAt(*t)
	}
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AboutTopicUpdate) SetUpdatedAt(t time.Time) *AboutTopicUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetImage sets the "image" edge to the Image entity.
func (atu *AboutTopicUpdate) SetImage(i *Image) *AboutTopicUpdate {
	return atu.SetImageID(i.ID)
}

// Mutation returns the AboutTopicMutation object of the builder.
func (atu *AboutTopicUpdate) Mutation() *AboutTopicMutation {
	return atu.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (atu *AboutTopicUpdate) ClearImage() *AboutTopicUpdate {
	atu.mutation.ClearImage()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AboutTopicUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atu.defaults()
	if len(atu.hooks) == 0 {
		if err = atu.check(); err != nil {
			return 0, err
		}
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AboutTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atu.check(); err != nil {
				return 0, err
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			if atu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AboutTopicUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AboutTopicUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AboutTopicUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AboutTopicUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := abouttopic.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AboutTopicUpdate) check() error {
	if v, ok := atu.mutation.Title(); ok {
		if err := abouttopic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "AboutTopic.title": %w`, err)}
		}
	}
	if v, ok := atu.mutation.DescriptionJp(); ok {
		if err := abouttopic.DescriptionJpValidator(v); err != nil {
			return &ValidationError{Name: "description_jp", err: fmt.Errorf(`ent: validator failed for field "AboutTopic.description_jp": %w`, err)}
		}
	}
	if v, ok := atu.mutation.DescriptionEn(); ok {
		if err := abouttopic.DescriptionEnValidator(v); err != nil {
			return &ValidationError{Name: "description_en", err: fmt.Errorf(`ent: validator failed for field "AboutTopic.description_en": %w`, err)}
		}
	}
	return nil
}

func (atu *AboutTopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abouttopic.Table,
			Columns: abouttopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: abouttopic.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abouttopic.FieldTitle,
		})
	}
	if value, ok := atu.mutation.DescriptionJp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abouttopic.FieldDescriptionJp,
		})
	}
	if value, ok := atu.mutation.DescriptionEn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abouttopic.FieldDescriptionEn,
		})
	}
	if value, ok := atu.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abouttopic.FieldPriority,
		})
	}
	if value, ok := atu.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abouttopic.FieldPriority,
		})
	}
	if value, ok := atu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: abouttopic.FieldCreatedAt,
		})
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: abouttopic.FieldUpdatedAt,
		})
	}
	if atu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abouttopic.ImageTable,
			Columns: []string{abouttopic.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abouttopic.ImageTable,
			Columns: []string{abouttopic.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abouttopic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AboutTopicUpdateOne is the builder for updating a single AboutTopic entity.
type AboutTopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AboutTopicMutation
}

// SetTitle sets the "title" field.
func (atuo *AboutTopicUpdateOne) SetTitle(s string) *AboutTopicUpdateOne {
	atuo.mutation.SetTitle(s)
	return atuo
}

// SetDescriptionJp sets the "description_jp" field.
func (atuo *AboutTopicUpdateOne) SetDescriptionJp(s string) *AboutTopicUpdateOne {
	atuo.mutation.SetDescriptionJp(s)
	return atuo
}

// SetDescriptionEn sets the "description_en" field.
func (atuo *AboutTopicUpdateOne) SetDescriptionEn(s string) *AboutTopicUpdateOne {
	atuo.mutation.SetDescriptionEn(s)
	return atuo
}

// SetImageID sets the "image_id" field.
func (atuo *AboutTopicUpdateOne) SetImageID(i int64) *AboutTopicUpdateOne {
	atuo.mutation.SetImageID(i)
	return atuo
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (atuo *AboutTopicUpdateOne) SetNillableImageID(i *int64) *AboutTopicUpdateOne {
	if i != nil {
		atuo.SetImageID(*i)
	}
	return atuo
}

// ClearImageID clears the value of the "image_id" field.
func (atuo *AboutTopicUpdateOne) ClearImageID() *AboutTopicUpdateOne {
	atuo.mutation.ClearImageID()
	return atuo
}

// SetPriority sets the "priority" field.
func (atuo *AboutTopicUpdateOne) SetPriority(i int) *AboutTopicUpdateOne {
	atuo.mutation.ResetPriority()
	atuo.mutation.SetPriority(i)
	return atuo
}

// AddPriority adds i to the "priority" field.
func (atuo *AboutTopicUpdateOne) AddPriority(i int) *AboutTopicUpdateOne {
	atuo.mutation.AddPriority(i)
	return atuo
}

// SetCreatedAt sets the "created_at" field.
func (atuo *AboutTopicUpdateOne) SetCreatedAt(t time.Time) *AboutTopicUpdateOne {
	atuo.mutation.SetCreatedAt(t)
	return atuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atuo *AboutTopicUpdateOne) SetNillableCreatedAt(t *time.Time) *AboutTopicUpdateOne {
	if t != nil {
		atuo.SetCreatedAt(*t)
	}
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AboutTopicUpdateOne) SetUpdatedAt(t time.Time) *AboutTopicUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetImage sets the "image" edge to the Image entity.
func (atuo *AboutTopicUpdateOne) SetImage(i *Image) *AboutTopicUpdateOne {
	return atuo.SetImageID(i.ID)
}

// Mutation returns the AboutTopicMutation object of the builder.
func (atuo *AboutTopicUpdateOne) Mutation() *AboutTopicMutation {
	return atuo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (atuo *AboutTopicUpdateOne) ClearImage() *AboutTopicUpdateOne {
	atuo.mutation.ClearImage()
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AboutTopicUpdateOne) Select(field string, fields ...string) *AboutTopicUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AboutTopic entity.
func (atuo *AboutTopicUpdateOne) Save(ctx context.Context) (*AboutTopic, error) {
	var (
		err  error
		node *AboutTopic
	)
	atuo.defaults()
	if len(atuo.hooks) == 0 {
		if err = atuo.check(); err != nil {
			return nil, err
		}
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AboutTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atuo.check(); err != nil {
				return nil, err
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			if atuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AboutTopicUpdateOne) SaveX(ctx context.Context) *AboutTopic {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AboutTopicUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AboutTopicUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AboutTopicUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := abouttopic.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AboutTopicUpdateOne) check() error {
	if v, ok := atuo.mutation.Title(); ok {
		if err := abouttopic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "AboutTopic.title": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.DescriptionJp(); ok {
		if err := abouttopic.DescriptionJpValidator(v); err != nil {
			return &ValidationError{Name: "description_jp", err: fmt.Errorf(`ent: validator failed for field "AboutTopic.description_jp": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.DescriptionEn(); ok {
		if err := abouttopic.DescriptionEnValidator(v); err != nil {
			return &ValidationError{Name: "description_en", err: fmt.Errorf(`ent: validator failed for field "AboutTopic.description_en": %w`, err)}
		}
	}
	return nil
}

func (atuo *AboutTopicUpdateOne) sqlSave(ctx context.Context) (_node *AboutTopic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abouttopic.Table,
			Columns: abouttopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: abouttopic.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AboutTopic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abouttopic.FieldID)
		for _, f := range fields {
			if !abouttopic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abouttopic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abouttopic.FieldTitle,
		})
	}
	if value, ok := atuo.mutation.DescriptionJp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abouttopic.FieldDescriptionJp,
		})
	}
	if value, ok := atuo.mutation.DescriptionEn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abouttopic.FieldDescriptionEn,
		})
	}
	if value, ok := atuo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abouttopic.FieldPriority,
		})
	}
	if value, ok := atuo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abouttopic.FieldPriority,
		})
	}
	if value, ok := atuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: abouttopic.FieldCreatedAt,
		})
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: abouttopic.FieldUpdatedAt,
		})
	}
	if atuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abouttopic.ImageTable,
			Columns: []string{abouttopic.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abouttopic.ImageTable,
			Columns: []string{abouttopic.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AboutTopic{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abouttopic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
