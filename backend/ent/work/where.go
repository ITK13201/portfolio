// Code generated by entc, DO NOT EDIT.

package work

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ITK13201/portfolio/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// DescriptionJp applies equality check predicate on the "description_jp" field. It's identical to DescriptionJpEQ.
func DescriptionJp(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionEn applies equality check predicate on the "description_en" field. It's identical to DescriptionEnEQ.
func DescriptionEn(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionEn), v))
	})
}

// LanguageID applies equality check predicate on the "language_id" field. It's identical to LanguageIDEQ.
func LanguageID(v int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguageID), v))
	})
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLink), v))
	})
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// DescriptionJpEQ applies the EQ predicate on the "description_jp" field.
func DescriptionJpEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpNEQ applies the NEQ predicate on the "description_jp" field.
func DescriptionJpNEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpIn applies the In predicate on the "description_jp" field.
func DescriptionJpIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescriptionJp), v...))
	})
}

// DescriptionJpNotIn applies the NotIn predicate on the "description_jp" field.
func DescriptionJpNotIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescriptionJp), v...))
	})
}

// DescriptionJpGT applies the GT predicate on the "description_jp" field.
func DescriptionJpGT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpGTE applies the GTE predicate on the "description_jp" field.
func DescriptionJpGTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpLT applies the LT predicate on the "description_jp" field.
func DescriptionJpLT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpLTE applies the LTE predicate on the "description_jp" field.
func DescriptionJpLTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpContains applies the Contains predicate on the "description_jp" field.
func DescriptionJpContains(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpHasPrefix applies the HasPrefix predicate on the "description_jp" field.
func DescriptionJpHasPrefix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpHasSuffix applies the HasSuffix predicate on the "description_jp" field.
func DescriptionJpHasSuffix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpEqualFold applies the EqualFold predicate on the "description_jp" field.
func DescriptionJpEqualFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionJpContainsFold applies the ContainsFold predicate on the "description_jp" field.
func DescriptionJpContainsFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescriptionJp), v))
	})
}

// DescriptionEnEQ applies the EQ predicate on the "description_en" field.
func DescriptionEnEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnNEQ applies the NEQ predicate on the "description_en" field.
func DescriptionEnNEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnIn applies the In predicate on the "description_en" field.
func DescriptionEnIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescriptionEn), v...))
	})
}

// DescriptionEnNotIn applies the NotIn predicate on the "description_en" field.
func DescriptionEnNotIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescriptionEn), v...))
	})
}

// DescriptionEnGT applies the GT predicate on the "description_en" field.
func DescriptionEnGT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnGTE applies the GTE predicate on the "description_en" field.
func DescriptionEnGTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnLT applies the LT predicate on the "description_en" field.
func DescriptionEnLT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnLTE applies the LTE predicate on the "description_en" field.
func DescriptionEnLTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnContains applies the Contains predicate on the "description_en" field.
func DescriptionEnContains(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnHasPrefix applies the HasPrefix predicate on the "description_en" field.
func DescriptionEnHasPrefix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnHasSuffix applies the HasSuffix predicate on the "description_en" field.
func DescriptionEnHasSuffix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnEqualFold applies the EqualFold predicate on the "description_en" field.
func DescriptionEnEqualFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescriptionEn), v))
	})
}

// DescriptionEnContainsFold applies the ContainsFold predicate on the "description_en" field.
func DescriptionEnContainsFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescriptionEn), v))
	})
}

// LanguageIDEQ applies the EQ predicate on the "language_id" field.
func LanguageIDEQ(v int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguageID), v))
	})
}

// LanguageIDNEQ applies the NEQ predicate on the "language_id" field.
func LanguageIDNEQ(v int64) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguageID), v))
	})
}

// LanguageIDIn applies the In predicate on the "language_id" field.
func LanguageIDIn(vs ...int64) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguageID), v...))
	})
}

// LanguageIDNotIn applies the NotIn predicate on the "language_id" field.
func LanguageIDNotIn(vs ...int64) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguageID), v...))
	})
}

// LanguageIDIsNil applies the IsNil predicate on the "language_id" field.
func LanguageIDIsNil() predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLanguageID)))
	})
}

// LanguageIDNotNil applies the NotNil predicate on the "language_id" field.
func LanguageIDNotNil() predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLanguageID)))
	})
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLink), v))
	})
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLink), v))
	})
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLink), v...))
	})
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLink), v...))
	})
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLink), v))
	})
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLink), v))
	})
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLink), v))
	})
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLink), v))
	})
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLink), v))
	})
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLink), v))
	})
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLink), v))
	})
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLink), v))
	})
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLink), v))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriority), v))
	})
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriority), v))
	})
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriority), v))
	})
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriority), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Work {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Work(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LanguageTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Image) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LanguageInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Work) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Work) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Work) predicate.Work {
	return predicate.Work(func(s *sql.Selector) {
		p(s.Not())
	})
}
