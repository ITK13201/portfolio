// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ITK13201/portfolio/backend/ent/abouttopic"
	"github.com/ITK13201/portfolio/backend/ent/image"
)

// AboutTopic is the model entity for the AboutTopic schema.
type AboutTopic struct {
	config `binding:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty" binding:"required"`
	// DescriptionJp holds the value of the "description_jp" field.
	DescriptionJp string `json:"description_jp,omitempty" binding:"required"`
	// DescriptionEn holds the value of the "description_en" field.
	DescriptionEn string `json:"description_en,omitempty" binding:"required"`
	// ImageID holds the value of the "image_id" field.
	ImageID int64 `json:"image_id,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty" binding:"required"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AboutTopicQuery when eager-loading is set.
	Edges AboutTopicEdges `json:"edges"`
}

// AboutTopicEdges holds the relations/edges for other nodes in the graph.
type AboutTopicEdges struct {
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AboutTopicEdges) ImageOrErr() (*Image, error) {
	if e.loadedTypes[0] {
		if e.Image == nil {
			// The edge image was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AboutTopic) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case abouttopic.FieldID, abouttopic.FieldImageID, abouttopic.FieldPriority:
			values[i] = new(sql.NullInt64)
		case abouttopic.FieldTitle, abouttopic.FieldDescriptionJp, abouttopic.FieldDescriptionEn:
			values[i] = new(sql.NullString)
		case abouttopic.FieldCreatedAt, abouttopic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AboutTopic", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AboutTopic fields.
func (at *AboutTopic) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abouttopic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int64(value.Int64)
		case abouttopic.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				at.Title = value.String
			}
		case abouttopic.FieldDescriptionJp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description_jp", values[i])
			} else if value.Valid {
				at.DescriptionJp = value.String
			}
		case abouttopic.FieldDescriptionEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description_en", values[i])
			} else if value.Valid {
				at.DescriptionEn = value.String
			}
		case abouttopic.FieldImageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field image_id", values[i])
			} else if value.Valid {
				at.ImageID = value.Int64
			}
		case abouttopic.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				at.Priority = int(value.Int64)
			}
		case abouttopic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case abouttopic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryImage queries the "image" edge of the AboutTopic entity.
func (at *AboutTopic) QueryImage() *ImageQuery {
	return (&AboutTopicClient{config: at.config}).QueryImage(at)
}

// Update returns a builder for updating this AboutTopic.
// Note that you need to call AboutTopic.Unwrap() before calling this method if this AboutTopic
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AboutTopic) Update() *AboutTopicUpdateOne {
	return (&AboutTopicClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the AboutTopic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AboutTopic) Unwrap() *AboutTopic {
	tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AboutTopic is not a transactional entity")
	}
	at.config.driver = tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AboutTopic) String() string {
	var builder strings.Builder
	builder.WriteString("AboutTopic(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteString(", title=")
	builder.WriteString(at.Title)
	builder.WriteString(", description_jp=")
	builder.WriteString(at.DescriptionJp)
	builder.WriteString(", description_en=")
	builder.WriteString(at.DescriptionEn)
	builder.WriteString(", image_id=")
	builder.WriteString(fmt.Sprintf("%v", at.ImageID))
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", at.Priority))
	builder.WriteString(", created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AboutTopics is a parsable slice of AboutTopic.
type AboutTopics []*AboutTopic

func (at AboutTopics) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
